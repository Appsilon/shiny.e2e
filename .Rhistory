x = list(id = id, dir = file.path(dir, id), test_env = file.path(dir, id, env_script)),
file = glue::glue("dir/config_{id}.yaml")
)
}
prepare_config()
dir.create("tests/end2end", showWarnings = FALSE)
dir.create("tests/end2end", showWarnings = FALSE)
dir.create("tests", showWarnings = FALSE)
dir.create("tests/end2end", showWarnings = FALSE)
dir.create("tests/end2end", showWarnings = FALSE, recursive = TRUE)
prepare_config <- function(id = "app", dir = "tests/end2end", env_script = "test_env.R") {
dir.create(dir, showWarnings = FALSE, recursive = TRUE)
yaml::write_yaml(
x = list(id = id, dir = file.path(dir, id), test_env = file.path(dir, id, env_script)),
file = glue::glue("dir/config_{id}.yaml")
)
}
prepare_config()
prepare_config <- function(id = "app", dir = "tests/end2end", env_script = "test_env.R") {
dir.create(dir, showWarnings = FALSE, recursive = TRUE)
yaml::write_yaml(
x = list(id = id, dir = file.path(dir, id), test_env = file.path(dir, id, env_script)),
file = glue::glue("{dir}/config_{id}.yaml")
)
}
prepare_config()
prepare_config <- function(id = "app", dir = "tests/end2end", env_script = "test_env.R") {
dir.create(dir, showWarnings = FALSE, recursive = TRUE)
yaml::write_yaml(
x = list(id = id, dir = file.path(dir, id), test_env = file.path(dir, id, env_script)),
file = glue::glue("{dir}/config_{id}.yaml")
)
}
yaml::read_yaml("tests/end2end/config_app.yaml")
jsonlite::toJSON(yaml::read_yaml("tests/end2end/config_app.yaml"))
jsonlite::toJSON(oko = yaml::read_yaml("tests/end2end/config_app.yaml")$dir)
jsonlite::toJSON(yaml::read_yaml("tests/end2end/config_app.yaml")$dir)
jsonlite::fromJSON('{ "label": "load-app", "onReadyScript": "pl/000-load-app.js" }')
jsonlite::toJSON(jsonlite::fromJSON('{ "label": "load-app", "onReadyScript": "pl/000-load-app.js" }'))
jsonlite::toJSON(jsonlite::fromJSON('{ "label": "load-app", "onReadyScript": "pl/000-load-app.js" }'), dataframe = "values")
jsonlite::toJSON(jsonlite::fromJSON('{ "label": "load-app", "onReadyScript": "pl/000-load-app.js" }'), auto_unbox = TRUE)
jsonlite::toJSON(list(a = "oko"))
jsonlite::toJSON(list(a = "oko"), auto_unbox = TRUE)
jsonlite::toJSON(list(a = "oko", b = NULL), auto_unbox = TRUE)
jsonlite::toJSON(list(a = "oko", b = NULL), auto_unbox = TRUE, null = "null")
tmpfun <- function(a,b,...) {
print(as.list(match.call()))
print(as.list(match.call(expand.dots=FALSE)))
}
tmpfun(1, b = 2)
library(jsonlite)
toJSON(list(a = 1))
toJSON(list(a = unbox(1)))
define_scenario <- function(label, onBeforeScript, cookiePath, url, referenceUrl, readyEvent, readySelector, delay,
hideSelectors, removeSelectors, onReadyScript, keyPressSelectors, hoverSelector, hoverSelectors, clickSelector,
clickSelectors, postInteractionWait, scrollToSelector, selectors, selectorExpansion, misMatchThreshold,
requireSameDimensions, config_path = "tests/end2end/config_app.yaml") {
browser()
jsonlite::write_json(as.list(environment()), config_path)
}
define_scenario()
as.list(environment())
jsonlite::write_json(as.list(environment()), config_path)
config_path
library(yaml)
read_yaml(config_path)
config_path = "tests/end2end/config_app.yaml"
read_yaml(config_path)
prepare_config <- function(id = "app", dir = "tests/end2end", env_script = "test_env.R") {
dir.create(file.path(dir, id), showWarnings = FALSE, recursive = TRUE)
dir.create(file.path(dir, id, "scenarios"), showWarnings = FALSE, recursive = TRUE)
yaml::write_yaml(
x = list(id = id, dir = file.path(dir, id), test_env = file.path(dir, id, env_script)),
file = glue::glue("{dir}/{id}/config_{id}.yaml")
)
}
update_structure <- function(dir) {
dir.create(dir, showWarnings = FALSE, recursive = TRUE)
file.copy(system.file("action.js", package = "end2end"), dir)
}
create_structure <- function(dir = "tests/end2end", add_config = FALSE, id = "app", env_script = "test_env.R") {
update_structure(dir)
if (add_config) {
prepare_config(id, dir, env_script)
}
}
define_scenario <- function(label, onBeforeScript, cookiePath, url, referenceUrl, readyEvent, readySelector, delay,
hideSelectors, removeSelectors, onReadyScript, keyPressSelectors, hoverSelector, hoverSelectors, clickSelector,
clickSelectors, postInteractionWait, scrollToSelector, selectors, selectorExpansion, misMatchThreshold,
requireSameDimensions, config_path = "tests/end2end/config_app.yaml") {
browser()
jsonlite::write_json(as.list(environment()), file.path(read_yaml(config_path)$dir, glue("sccenarios/{label}.json")))
}
create_structure()
prepare_config()
library(end2end)
create_structure()
prepare_config()
define_scenario <- function(label, onBeforeScript, cookiePath, url, referenceUrl, readyEvent, readySelector, delay,
hideSelectors, removeSelectors, onReadyScript, keyPressSelectors, hoverSelector, hoverSelectors, clickSelector,
clickSelectors, postInteractionWait, scrollToSelector, selectors, selectorExpansion, misMatchThreshold,
requireSameDimensions, config_path = "tests/end2end/config_app.yaml") {
browser()
params <- as.list(environment()) %>%
purrr::keep()
scenario_path <- file.path(read_yaml(config_path)$dir, glue("scenarios/{label}.json"))
jsonlite::write_json(as.list(environment()), scenario_path)
}
define_scenario()
as.list(environment())
as.list(environment())$label
is.null(as.list(environment())$label)
missing(as.list(environment())$label)
str(as.list(environment())$label)
environment()
devtools::install_github("Appsilon/shiny.semantic")
ls
shiny.semantic::uirender
tmlwidgets::createWidget
htmlwidgets::createWidget
htmlwidgets::createWidget(
name = "uirender",
div("oko"),
width = width,
height = height,
package = "shiny.semantic",
elementId = element_id
)
htmlwidgets::createWidget(
name = "uirender",
shiny::div("oko"),
width = width,
height = height,
package = "shiny.semantic",
elementId = element_id
)
htmlwidgets::createWidget(
name = "uirender",
shiny::div("oko"),
width = 10,
height = 10,
package = "shiny.semantic",
elementId = "oko"
)
htmlwidgets::createWidget
oko <- htmlwidgets::createWidget(
name = "uirender",
shiny::div("oko"),
width = 10,
height = 10,
package = "shiny.semantic",
elementId = "oko"
)
str(oko)
htmlwidgets:::print.htmlwidget
htmlwidgets::html_print
htmlwidgets:::html_print
debug()
debug(htmlwidgets:::print.htmlwidget)
htmlwidgets::createWidget(
name = "uirender",
shiny::div("oko"),
width = 10,
height = 10,
package = "shiny.semantic",
elementId = "oko"
)
View(viewer)
viewer
viewerFunc
html_print
x
htmltools::as.tags(x, standalone = TRUE)
oko <- htmltools::as.tags(x, standalone = TRUE)
View(oko)
setwd("~/projects/apps/standard/app")
system("Rscript -e \"shiny::runApp('app.R', port = 8888)\" &>/dev/null | cat")
system("Rscript -e \"shiny::runApp('app.R', port = 8888)\" &>/dev/null & | cat")
system("Rscript -e \"shiny::runApp('app.R', port = 8888)\" &>/dev/null &", intern = TRUE)
system("Rscript -e \"shiny::runApp('app.R', port = 8888)\" &>/dev/null &", intern = TRUE)
system("Rscript -e \"shiny::runApp('app.R', port = 8888)\" &>/dev/null", intern = TRUE)
system("Rscript -e \"shiny::runApp('app.R', port = 8888)\" &>/dev/null &")
system("Rscript -e \"shiny::runApp('app.R', port = 8888)\"", wait = FALSE)
Sys.getpid()
system("Rscript -e \"shiny::runApp('app.R', port = 8888)\" & echo $!", wait = FALSE)
pid <- system("Rscript -e \"shiny::runApp('app.R', port = 8888)\" & echo $!", wait = FALSE)
pid
pid <- capture.output(system("Rscript -e \"shiny::runApp('app.R', port = 8888)\" & echo $!", wait = FALSE))
pid
system2("Rscript -e \"shiny::runApp('app.R', port = 8888)\" & echo $!", wait = FALSE)
return(system("Rscript -e \"shiny::runApp('app.R', port = 8888)\" & echo $!", wait = FALSE))
oko <- return(system("Rscript -e \"shiny::runApp('app.R', port = 8888)\" & echo $!", wait = FALSE))
devtools::system_output("Rscript -e \"shiny::runApp('app.R', port = 8888)\" & echo $!", wait = FALSE)
processx::run("Rscript -e \"shiny::runApp('app.R', port = 8888) &>/dev/null\" & echo $!")
devtools::system_output("Rscript -e \"shiny::runApp('app.R', port = 8888) &>/dev/null &\"")
oko <- capture.output(system("Rscript -e \"shiny::runApp('app.R', port = 8888)\" &>/dev/null &"))
system("ls & echo $!")
oko <- system("ls & echo $!")
capture.output(system("ls & echo $!"))
oko <- capture.output(system("ls & echo $!"))
oko <- capture.output(system("ls"))
oko <- system("ls", intern = TRUE)
oko <- system("Rscript -e \"shiny::runApp('app.R', port = 8888) &>/dev/null\" & echo $!", inter = TRUE)
oko <- system("Rscript -e \"shiny::runApp('app.R', port = 8888)\" &>/dev/null & echo $!", inter = TRUE)
oko <- system("Rscript -e \"shiny::runApp('app.R', port = 8888)\" &>/dev/null &", intern = TRUE)
system2("Rscript", "-e", "\"shiny::runApp('app.R', port = 8888)\"", "&>/dev/null &", stdout = TRUE)
pid_file <- tempfile("pid")
sprintf("Rscript -e \"shiny::runApp('app.R', port = 8888)\" & cat $! > %s", pid_file)
system(sprintf("Rscript -e \"shiny::runApp('app.R', port = 8888)\" & cat $! > %s", pid_file), wait = FALSE)
system(sprintf("Rscript -e \"shiny::runApp('app.R', port = 8888)\" & echo $! > %s", pid_file), wait = FALSE)
file.edit(pid_file)
readLines()
pid_file
pid_file <- tempfile("pid")
pid_file <- tempfile("pid")
system(sprintf("Rscript -e \"shiny::runApp('app.R', port = 8888)\" & cat $! > %s", pid_file), wait = FALSE)
pid_file <- tempfile("pid")
system(sprintf("Rscript -e \"shiny::runApp('app.R', port = 8888)\" & echo $! > %s", pid_file), wait = FALSE)
readLines(pid_file)
pid <- readLines(pid_file)
toJSON(oko = list(a = 1))
library(jsonlite)
toJSON(oko = list(a = 1))
toJSON(list(oko = list(a = 1)))
writeLines(sprintf("module.export = %s", toJSON(list(a = 1))))
writeLines(sprintf("module.export = %s", toJSON(list(a = 1))), con = "config.js")
writeLines(sprintf("module.export = %s", toJSON(list(a = 1)), pretty = TRUE), con = "config.js")
toJSON(list(a = 1)), pretty = TRUE)
toJSON(list(a = 1), pretty = TRUE)
writeLines(sprintf("module.export = %s", toJSON(list(a = 1), pretty = TRUE)), con = "config.js")
devtools::document()
devtools::document()
library(end2end)
make_structure()
define_scenario("oko")
debugonce(define_scenario)
define_scenario("oko")
yaml::read_yaml(glue::glue("{config_dir}/{config_name}"))
glue::glue("{config_dir}/engine_scripts/{label}.js")
get_scenarios(config_dir)
params
config_dir
write_scenarios(scenarios_list, config_dir)
glue::glue("{config_dir}/{scenarios_list}")
devtools::document()
library(end2end)
make_structure()
devtools::document()
library(end2end)
devtools::document()
library(end2end)
make_structure()
define_scenario("oko")
run_scenarios()
library(end2end)
run_scenarios()
library(end2end)
library(end2end)
run_scenarios()
scenarios
oko <- list(a = 1)
oko <- list(a = 1, b = 2)
oko$a <- NULL
oko
devtools::document()
library(end2end)
library(end2end)
run_scenarios()
setwd("~/projects/apps/standard/app")
library(end2end)
make_structure()
library(end2end)
make_structure()
library(end2end)
make_structure()
library(end2end)
make_structure()
define_scenario("oko")
run_scenarios()
setwd("~/projects/apps/standard/app")
make_structure()
define_scenario("oko")
run_scenarios()
debugonce(run_scenarios)
run_scenarios()
writeLines(sprintf("module.export = %s", jsonlite::toJSON(params, pretty = TRUE)),
con = glue::glue("{config$dir}/config.js"))
system(glue::glue("backstop test --configPath={config$dir}/config.js"), wait = TRUE)
debugonce(run_scenarios)
run_scenarios()
library(end2end)
debugonce(run_scenarios)
run_scenarios()
pid_file <- tempfile("pid")
system(sprintf("Rscript -e \"shiny::runApp('app.R', port = 8888)\" & echo $! > %s", pid_file), wait = FALSE)
pid <- readLines(pid_file)
setwd("~/projects/apps/standard/app")
library(end2end)
library(end2end)
make_structure()
define_scenario("oko")
run_scenarios()
jsonlite::fromJSON('{
"viewports": [{
"name": "mac_screen",
"width": 1920,
"height": 1080
}],
"asyncCaptureLimit": 5,
"engineFlags": [],
"engine": "puppeteer",
"engineOptions": {
"ignoreHTTPSErrors": true,
// "headless": true,
"args": [
"--no-sandbox",
"--disable-setuid-sandbox"
]
},
"report": ["CI"],
"debug": false,
"paths": {
"bitmaps_reference": "reference_screenshots",
"bitmaps_test": "test_screenshots",
"engine_scripts": "engine_scripts",
"html_report": "report/html_report",
"ci_report": "report/ci_report"
},
"scenarios": [
{
"label": "oko",
"url": "http://127.0.0.1:8888",
"delay": 1000,
"removeSelectors": [],
"selectors": ["document"],
"misMatchThreshold": 0.2,
"onReadyScript": "oko.js"
}
],
"id": "app"
}')
nos <- jsonlite::fromJSON('{
"viewports": [{
"name": "mac_screen",
"width": 1920,
"height": 1080
}],
"asyncCaptureLimit": 5,
"engineFlags": [],
"engine": "puppeteer",
"engineOptions": {
"ignoreHTTPSErrors": true,
// "headless": true,
"args": [
"--no-sandbox",
"--disable-setuid-sandbox"
]
},
"report": ["CI"],
"debug": false,
"paths": {
"bitmaps_reference": "reference_screenshots",
"bitmaps_test": "test_screenshots",
"engine_scripts": "engine_scripts",
"html_report": "report/html_report",
"ci_report": "report/ci_report"
},
"scenarios": [
{
"label": "oko",
"url": "http://127.0.0.1:8888",
"delay": 1000,
"removeSelectors": [],
"selectors": ["document"],
"misMatchThreshold": 0.2,
"onReadyScript": "oko.js"
}
],
"id": "app"
}')
jsonlite::fromJSON('{
"viewports": [{
"name": "mac_screen",
"width": 1920,
"height": 1080
}]}')
jsonlite::fromJSON('{
"viewports": [{
"name": "mac_screen",
"width": 1920,
"height": 1080
}]}', simplifyVector = FALSE)
jsonlite::toJSON(jsonlite::fromJSON('{
"viewports": [{
"name": "mac_screen",
"width": 1920,
"height": 1080
}]}', simplifyVector = FALSE))
jsonlite::toJSON(jsonlite::fromJSON('{
"viewports": [{
"name": "mac_screen",
"width": 1920,
"height": 1080
}]}', simplifyVector = FALSE), auto_unbox = FALSE)
jsonlite::toJSON(jsonlite::fromJSON('{
"viewports": [{
"name": "mac_screen",
"width": 1920,
"height": 1080
}]}', simplifyVector = FALSE), auto_unbox = TRUE)
library(jsonlite)
toJSON(list(a=1, b =2))
toJSON(list(a=1, b =2), pretty = TRUE, auto_unbox = TRUE)
toJSON(list(list(a=1, b =2)), pretty = TRUE, auto_unbox = TRUE)
toJSON(list("CI"), pretty = TRUE, auto_unbox = TRUE)
devtools::document()
library(end2end)
setwd("~/projects/apps/standard/app")
make_structure()
define_scenario("oko")
run_scenarios()
setwd("~/projects/apps/standard/app/tests/end2end/app")
library(end2end)
run_scenarios(action = "reference")
library(end2end)
run_scenarios(action = "reference")
run_scenarios(action = "reference")
run_scenarios(action = "reference")
run_scenarios(action = "reference")
library(end2end)
run_scenarios(action = "reference")
pid_file <- tempfile("pid")
file.create(pid_file)
system(sprintf("Rscript -e \"shiny::runApp('../../../app.R', port = 8888)\" & echo $! > %s", pid_file), wait = FALSE)
pid <- readLines(pid_file)
pid
library(end2end)
run_scenarios(action = "reference")
library(end2end)
run_scenarios(action = "reference")
setwd("~/projects/apps/standard/app")
library(end2end)
run_scenarios(action = "reference")
library(end2end)
library(end2end)
run_scenarios(action = "reference")
library(end2end)
run_scenarios(action = "reference")
make_structure()
define_scenario("oko")
run_scenarios(action = "reference")
setwd("~/projects/appsilon/internal/end2end")
devtools::document()
library(end2end)
setwd("~/projects/apps/standard")
make_structure()
define_scenario("oko")
run_scenarios(action = "reference", app_path = "src/app.R")
devtools::document()
setwd("~/projects/appsilon/internal/end2end")
devtools::document()
library(end2end)
setwd("~/projects/apps/standard")
make_structure()
define_scenario("oko")
run_scenarios(action = "reference", app_path = "src/app.R")
library(end2end)
run_scenarios(action = "reference", app_path = "src/app.R")
pid_file
file.create(pid_file)
pid
run_scenarios(action = "reference", app_path = "src/app.R")
pid
run_scenarios(action = "reference", app_path = "src/app.R")
library(end2end)
run_scenarios(action = "reference", app_path = "src/app.R")
run_scenarios(action = "test", app_path = "src/app.R")
run_scenarios(action = "test", app_path = "src/app.R")
run_scenarios(action = "test", app_path = "src/app.R")
run_scenarios(action = "test", app_path = "src/app.R")
library(end2end)
run_scenarios(action = "test", app_path = "src/app.R")
define_scenario("nos")
run_scenarios(action = "test", app_path = "src/app.R")
run_scenarios(action = "reference", app_path = "src/app.R")
run_scenarios(action = "test", app_path = "src/app.R")
run_scenarios("oko" ,action = "test", app_path = "src/app.R")
library(end2end)
run_scenarios("oko" ,action = "test", app_path = "src/app.R")
label
scenarios
scenarios %>%
purrr::keep(~ .$label %in% label)
scenarios <- jsonlite::fromJSON(glue::glue("{config$dir}/{scenarios_list_file}"), simplifyVector = FALSE)
scenarios
scenarios %>%
purrr::keep(~ .$label %in% label)
library(end2end)
run_scenarios("oko" ,action = "test", app_path = "src/app.R")
library(end2end)
run_scenarios("oko", action = "reference", app_path = "src/app.R")
library(end2end)
run_scenarios("oko", action = "reference", app_path = "src/app.R")
run_scenarios("oko", action = "test", app_path = "src/app.R")
run_scenarios("nos", action = "test", app_path = "src/app.R")
run_scenarios(action = "test", app_path = "src/app.R")
Sys.getenv("OSTYPE")
system("echo $OSTYPE")
system("echo $OSTYPE", intern = TRUE)
Sys.info()
sys.status()
R.version$os
